# --- –§–∞–π–ª: main.py ---

import sys
import os
import html
import json
import markdown
import logging
import logging.handlers
import datetime
from typing import Optional, Dict, Set

from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QTextEdit, QLabel, QLineEdit, QFileDialog,
    QSizePolicy, QSpinBox, QMessageBox, QStatusBar, QGroupBox,
    QCheckBox, QDialog, QComboBox, QInputDialog, QStyle
)
from PySide6.QtCore import (
    Qt, Slot, QUrl, QTimer, QCoreApplication, QFileInfo, QTranslator, QLocale
)
from PySide6.QtGui import QAction, QKeySequence, QIcon, QFont, QActionGroup

try:
    from dotenv import load_dotenv, set_key
except ImportError:
    print("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ú–æ–¥—É–ª—å python-dotenv –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install python-dotenv")
    sys.exit(1)

try:
    from PySide6.QtWebEngineWidgets import QWebEngineView
except ImportError:
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–µ—Å—å –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º print
    print("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ú–æ–¥—É–ª—å QtWebEngineWidgets –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install PySide6-WebEngine")
    sys.exit(1)

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã ---
from chat_model import ChatModel
from chat_view import ChatView
from chat_viewmodel import ChatViewModel
from summaries_window import SummariesWindow
from log_viewer_window import LogViewerWindow
import db_manager

try:
    from manage_templates_dialog import ManageTemplatesDialog
except ImportError:
    ManageTemplatesDialog = None
    print("--- MainWindow: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: manage_templates_dialog.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. ---")

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
APP_ICON_FILENAME = "app_icon.png"
TEMPLATES_FILENAME = "instruction_templates.json"
# –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ—Ç—Å—é–¥–∞, —Ç.–∫. –∏—Ö –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ self.tr()
COMMON_EXTENSIONS = [".py", ".txt", ".md", ".json", ".html", ".css", ".js", ".yaml", ".yml", ".pdf", ".docx"]

# --- –î–∏–∞–ª–æ–≥ —Å–ø—Ä–∞–≤–∫–∏ ---
class HelpDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle(self.tr("–°–ø—Ä–∞–≤–∫–∞ - GitGemini Pro"))
        self.setMinimumSize(700, 500)
        layout = QVBoxLayout(self)
        self.help_view = QWebEngineView()
        layout.addWidget(self.help_view, 1)
        script_dir = os.path.dirname(os.path.abspath(__file__))

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ø—Ä–∞–≤–∫–∏
        current_app_lang = os.getenv('APP_LANGUAGE', QLocale.system().name().split('_')[0])
        help_file = f"help_content_{current_app_lang}.html"
        html_file_path = os.path.join(script_dir, help_file)

        if not os.path.exists(html_file_path):
             # –ï—Å–ª–∏ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
             html_file_path = os.path.join(script_dir, "help_content.html")

        if os.path.exists(html_file_path):
            local_url = QUrl.fromLocalFile(QFileInfo(html_file_path).absoluteFilePath())
            self.help_view.load(local_url)
        else:
            self.help_view.setHtml(self.tr("<html><body><h1>–û—à–∏–±–∫–∞</h1><p>–§–∞–π–ª —Å–ø—Ä–∞–≤–∫–∏ 'help_content.html' –Ω–µ –Ω–∞–π–¥–µ–Ω.</p></body></html>"))
        
        close_button = QPushButton(self.tr("–ó–∞–∫—Ä—ã—Ç—å"))
        close_button.clicked.connect(self.accept)
        layout.addWidget(close_button, 0, Qt.AlignmentFlag.AlignRight)
        self.setLayout(layout)

# --- –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
class MainWindow(QMainWindow):
    def __init__(self, view_model: ChatViewModel, log_file_path: str, parent: Optional[QWidget] = None): # –î–æ–±–∞–≤–ª—è–µ–º log_file_path
        super().__init__(parent)
        if not isinstance(view_model, ChatViewModel):
            raise TypeError("ViewModel required")
        self.view_model = view_model
        self.logger = logging.getLogger(__name__)

        self._log_file_path = log_file_path # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É
        self._log_viewer_window: Optional[LogViewerWindow] = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
        self.summaries_window: Optional[SummariesWindow] = None

        self._dotenv_path = self._get_resource_path('.env')
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(self._dotenv_path):
            try:
                with open(self._dotenv_path, 'w') as f:
                    pass # –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
            except OSError as e:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env: {e}")
                # –≠—Ç–æ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        
        self._templates_file_path = self._get_resource_path(TEMPLATES_FILENAME)
        self.instruction_templates: Dict[str, str] = {}
        self._load_instruction_templates()

        self.token_status_label = QLabel(self.tr("–¢–æ–∫–µ–Ω—ã: ..."))
        self.token_status_label.setStyleSheet("padding-right: 10px;")
        self._status_clear_timer = QTimer(self)
        self._status_clear_timer.setSingleShot(True)
        self._status_clear_timer.timeout.connect(self._clear_temporary_status_message)

        self._init_ui()
        self._populate_templates_combobox()
        self._create_menu()
        self._connect_signals()

        self.view_model.windowTitleChanged.emit()
        self.view_model.geminiApiKeyStatusTextChanged.emit()
        self.view_model.githubTokenStatusTextChanged.emit()
        self._update_all_states_from_vm()

    def _get_resource_path(self, filename: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É, –±—É–¥—å —Ç–æ —Å–∫—Ä–∏–ø—Ç –∏–ª–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
        if getattr(sys, 'frozen', False):
            base_path = os.path.dirname(sys.executable)
        else:
            base_path = os.path.dirname(os.path.abspath(__file__))
        return os.path.join(base_path, filename)

    def _init_ui(self):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ self.tr()
        self.CUSTOM_INSTRUCTIONS_TEXT = self.tr("(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)")
        self.SAVE_AS_TEMPLATE_TEXT = self.tr("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–∞–∫ —à–∞–±–ª–æ–Ω...")

        self.setWindowTitle(self.tr("GitGemini Pro"))
        self.setGeometry(100, 100, 950, 800)
        
        icon_path = self._get_resource_path(APP_ICON_FILENAME)
        if os.path.exists(icon_path):
            self.setWindowIcon(QIcon(icon_path))

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)

        # --- –ë–ª–æ–∫ URL –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –í–µ—Ç–∫–∏ ---
        repo_layout = QHBoxLayout()
        repo_url_label = QLabel(self.tr("URL –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:"))
        self.repo_url_lineedit = QLineEdit()
        self.repo_url_lineedit.setPlaceholderText(self.tr("https://github.com/user/repository"))
        
        branch_label = QLabel(self.tr("–í–µ—Ç–∫–∞:"))
        self.branch_combobox = QComboBox()
        self.branch_combobox.setToolTip(self.tr("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"))
        self.branch_combobox.setEnabled(False)
        self.branch_combobox.setSizePolicy(QSizePolicy.Policy.MinimumExpanding, QSizePolicy.Policy.Fixed)

        repo_layout.addWidget(repo_url_label)
        repo_layout.addWidget(self.repo_url_lineedit, 3)
        repo_layout.addWidget(branch_label)
        repo_layout.addWidget(self.branch_combobox, 1)
        main_layout.addLayout(repo_layout)

        analysis_layout = QHBoxLayout()
        self.analyze_repo_button = QPushButton(self.tr("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"))
        self.cancel_analysis_button = QPushButton(self.tr("–û—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞"))

        self.view_summaries_button = QPushButton("üëÅÔ∏è")
        self.view_summaries_button.setToolTip(self.tr("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∏—Ö —Å–∞–º–º–∞—Ä–∏"))
        self.view_summaries_button.setFixedSize(32, 32)
        font = self.view_summaries_button.font()
        font.setPointSize(14)
        self.view_summaries_button.setFont(font)
        self.view_summaries_button.setStyleSheet("QPushButton { border: 1px solid #555; border-radius: 4px; } QPushButton:hover { background-color: #444; }")

        analysis_layout.addWidget(self.analyze_repo_button, 1)
        analysis_layout.addWidget(self.cancel_analysis_button, 1)
        analysis_layout.addSpacing(20)
        analysis_layout.addWidget(self.view_summaries_button)
        analysis_layout.addStretch(0)
        main_layout.addLayout(analysis_layout)

        # --- –ë–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
        self.toggle_settings_button = QPushButton(self.tr("–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ñº"))
        main_layout.addWidget(self.toggle_settings_button)

        self.settings_group_box = QGroupBox(self.tr("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
        settings_inner_layout = QVBoxLayout(self.settings_group_box)
        
        # Gemini API Key
        api_key_layout = QHBoxLayout()
        self.api_key_status_label = QLabel(self.tr("–ö–ª—é—á API:"))
        self.api_key_lineedit = QLineEdit()
        self.api_key_lineedit.setPlaceholderText(self.tr("–í–≤–µ–¥–∏—Ç–µ Gemini API –∫–ª—é—á..."))
        self.api_key_lineedit.setEchoMode(QLineEdit.EchoMode.Password)
        self.api_key_save_button = QPushButton(self.tr("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á"))
        api_key_layout.addWidget(self.api_key_status_label)
        api_key_layout.addWidget(self.api_key_lineedit, 1)
        api_key_layout.addWidget(self.api_key_save_button)
        settings_inner_layout.addLayout(api_key_layout)

        # GitHub Token
        github_token_layout = QHBoxLayout()
        self.github_token_status_label = QLabel(self.tr("–¢–æ–∫–µ–Ω GitHub:"))
        self.github_token_lineedit = QLineEdit()
        self.github_token_lineedit.setPlaceholderText(self.tr("–í–≤–µ–¥–∏—Ç–µ GitHub Personal Access Token..."))
        self.github_token_lineedit.setEchoMode(QLineEdit.EchoMode.Password)
        self.github_token_save_button = QPushButton(self.tr("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω"))
        github_token_layout.addWidget(self.github_token_status_label)
        github_token_layout.addWidget(self.github_token_lineedit, 1)
        github_token_layout.addWidget(self.github_token_save_button)
        settings_inner_layout.addLayout(github_token_layout)

        # Model Selection
        model_name_layout = QHBoxLayout()
        model_name_label = QLabel(self.tr("–ú–æ–¥–µ–ª—å –ò–ò:"))
        self.model_name_combobox = QComboBox()
        self.model_name_combobox.setEditable(True)
        self.model_name_combobox.setToolTip(self.tr("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Gemini –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ä—É—á–Ω—É—é"))
        model_name_layout.addWidget(model_name_label)
        model_name_layout.addWidget(self.model_name_combobox, 1)
        settings_inner_layout.addLayout(model_name_layout)

        # Max Tokens
        max_tokens_layout = QHBoxLayout()
        max_tokens_label = QLabel(self.tr("–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞:"))
        self.max_tokens_spinbox = QSpinBox()
        self.max_tokens_spinbox.setRange(256, 131072)
        self.max_tokens_spinbox.setSingleStep(1024)
        self.max_tokens_spinbox.setValue(65536)
        max_tokens_layout.addWidget(max_tokens_label)
        max_tokens_layout.addWidget(self.max_tokens_spinbox)
        max_tokens_layout.addStretch(1)
        settings_inner_layout.addLayout(max_tokens_layout)

        # Extensions
        extensions_group_label = QLabel(self.tr("–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"))
        settings_inner_layout.addWidget(extensions_group_label)
        checkbox_layout = QHBoxLayout()
        self.common_ext_checkboxes = {ext: QCheckBox(ext) for ext in COMMON_EXTENSIONS}
        for cb in self.common_ext_checkboxes.values():
            checkbox_layout.addWidget(cb)
        checkbox_layout.addStretch(1)
        settings_inner_layout.addLayout(checkbox_layout)
        custom_ext_layout = QHBoxLayout()
        custom_ext_label = QLabel(self.tr("–î—Ä—É–≥–∏–µ:"))
        self.custom_ext_lineedit = QLineEdit()
        self.custom_ext_lineedit.setPlaceholderText(self.tr(".log .csv .xml ..."))
        custom_ext_layout.addWidget(custom_ext_label)
        custom_ext_layout.addWidget(self.custom_ext_lineedit, 1)
        settings_inner_layout.addLayout(custom_ext_layout)
        
        main_layout.addWidget(self.settings_group_box)
        self.settings_group_box.setVisible(False)

        # --- –ë–ª–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º) ---
        self.toggle_instructions_button = QPushButton(self.tr("–°–≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚ñ≤"))
        main_layout.addWidget(self.toggle_instructions_button)

        self.instructions_container = QWidget()
        instructions_container_layout = QVBoxLayout(self.instructions_container)
        instructions_container_layout.setContentsMargins(0, 0, 0, 0)

        self.instructions_textedit = QTextEdit()
        self.instructions_textedit.setPlaceholderText(self.tr("–°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)..."))
        self.instructions_textedit.setFixedHeight(80)
        instructions_container_layout.addWidget(self.instructions_textedit)

        templates_layout = QHBoxLayout()
        templates_label = QLabel(self.tr("–®–∞–±–ª–æ–Ω:"))
        self.templates_combobox = QComboBox()
        self.manage_templates_button = QPushButton(self.tr("–£–ø—Ä–∞–≤–ª—è—Ç—å..."))
        templates_layout.addWidget(templates_label)
        templates_layout.addWidget(self.templates_combobox, 1)
        templates_layout.addWidget(self.manage_templates_button)
        instructions_container_layout.addLayout(templates_layout)

        main_layout.addWidget(self.instructions_container)

        # --- –ë–ª–æ–∫ —á–∞—Ç–∞ ---
        self.dialog_textedit = ChatView(self.view_model, self)
        self.input_textedit = QTextEdit()
        self.input_textedit.setPlaceholderText(self.tr("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, Ctrl+Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)..."))
        self.input_textedit.setFixedHeight(100)
        
        bottom_button_layout = QHBoxLayout()
        self.cancel_button = QPushButton(self.tr("–û—Ç–º–µ–Ω–∞"))
        self.send_button = QPushButton(self.tr("–û—Ç–ø—Ä–∞–≤–∏—Ç—å Ctrl ‚Üµ"))
        bottom_button_layout.addWidget(self.cancel_button)
        bottom_button_layout.addStretch(1)
        bottom_button_layout.addWidget(self.send_button)

        main_layout.addWidget(self.dialog_textedit, 1)
        main_layout.addWidget(self.input_textedit)
        main_layout.addLayout(bottom_button_layout)
        
        # --- –°—Ç–∞—Ç—É—Å-–±–∞—Ä ---
        status_bar = QStatusBar(self)
        self.setStatusBar(status_bar)
        status_bar.addPermanentWidget(self.token_status_label)

        self.input_textedit.installEventFilter(self)

    def _create_menu(self):
        menu_bar = self.menuBar()
        
        # --- File Menu ---
        file_menu = menu_bar.addMenu(self.tr("&–§–∞–π–ª"))
        actions = [
            (self.tr("&–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è"), QKeySequence.StandardKey.New, self._new_session),
            (self.tr("&–û—Ç–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é..."), QKeySequence.StandardKey.Open, self._open_session),
            (self.tr("&–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é"), QKeySequence.StandardKey.Save, self.view_model.saveSession),
            (self.tr("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é &–∫–∞–∫..."), QKeySequence.StandardKey.SaveAs, self.view_model.saveSessionAs),
            None,
            (self.tr("&–í—ã—Ö–æ–¥"), QKeySequence.StandardKey.Quit, self.close)
        ]
        for item in actions:
            if item:
                text, shortcut, slot = item
                action = QAction(text, self)
                action.setShortcut(shortcut)
                action.triggered.connect(slot)
                file_menu.addAction(action)
            else:
                file_menu.addSeparator()
        
        self._create_language_menu()
        self._create_view_menu()

        # --- Help Menu ---
        help_menu = menu_bar.addMenu(self.tr("&–°–ø—Ä–∞–≤–∫–∞"))
        help_content_action = QAction(self.tr("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏..."), self)
        help_content_action.setShortcut(QKeySequence.StandardKey.HelpContents)
        help_content_action.triggered.connect(self._show_help_content)
        help_menu.addAction(help_content_action)
        help_menu.addSeparator()
        about_action = QAction(self.tr("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ..."), self)
        about_action.triggered.connect(self._show_about_dialog)
        help_menu.addAction(about_action)

    def _create_view_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        view_menu = self.menuBar().addMenu(self.tr("&–í–∏–¥"))
        
        show_logs_action = QAction(self.tr("–ü–æ–∫–∞–∑–∞—Ç—å &–õ–æ–≥–∏"), self)
        show_logs_action.setShortcut(QKeySequence("Ctrl+L")) # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤
        show_logs_action.triggered.connect(self._show_log_viewer)
        view_menu.addAction(show_logs_action)

    @Slot()
    def _show_log_viewer(self):
        """–°–æ–∑–¥–∞–µ—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤."""
        if self._log_viewer_window is None:
            self.logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ LogViewerWindow.")
            self._log_viewer_window = LogViewerWindow(self._log_file_path, self)
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏–≥–Ω–∞–ª—É —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É
            self._log_viewer_window.destroyed.connect(self._on_log_viewer_destroyed)
            self._log_viewer_window.show()
        else:
            # –ï—Å–ª–∏ –æ–∫–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
            self._log_viewer_window.activateWindow()

    @Slot()
    def _on_log_viewer_destroyed(self):
        """–°–ª–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –æ–∫–Ω–∞ –ª–æ–≥–æ–≤."""
        self.logger.info("–≠–∫–∑–µ–º–ø–ª—è—Ä LogViewerWindow –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –æ—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É.")
        self._log_viewer_window = None

    def _create_language_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
        lang_menu = self.menuBar().addMenu(self.tr("&–Ø–∑—ã–∫"))

        # –ì—Ä—É–ø–ø–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        lang_group = QActionGroup(self)
        lang_group.setExclusive(True)

        ru_action = QAction(self.tr("–†—É—Å—Å–∫–∏–π"), self)
        ru_action.setCheckable(True)
        ru_action.triggered.connect(lambda: self._switch_language('ru'))
        lang_menu.addAction(ru_action)
        lang_group.addAction(ru_action)

        en_action = QAction(self.tr("English"), self)
        en_action.setCheckable(True)
        en_action.triggered.connect(lambda: self._switch_language('en'))
        lang_menu.addAction(en_action)
        lang_group.addAction(en_action)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        # (os.getenv –≤–µ—Ä–Ω–µ—Ç None –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)
        current_lang = os.getenv('APP_LANGUAGE', QLocale.system().name().split('_')[0])
        if current_lang == 'ru':
            ru_action.setChecked(True)
        else:
            en_action.setChecked(True)

    @Slot(str)
    def _switch_language(self, lang_code: str):
        """–°–ª–æ—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤ .env."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º set_key –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env
            set_key(self._dotenv_path, "APP_LANGUAGE", lang_code)
            self.logger.info(f"–Ø–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{lang_code}' –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self._dotenv_path}")
            
            QMessageBox.information(
                self,
                self.tr("–°–º–µ–Ω–∞ —è–∑—ã–∫–∞"),
                self.tr("–Ø–∑—ã–∫ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
            )
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —è–∑—ã–∫–∞ –≤ —Ñ–∞–π–ª .env: {e}", exc_info=True)
            QMessageBox.critical(
                self,
                self.tr("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"),
                self.tr("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —è–∑—ã–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª .env.")
            )

    def _connect_signals(self):
        # –ö–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.repo_url_lineedit.editingFinished.connect(
            lambda: self.view_model.updateRepoUrl(self.repo_url_lineedit.text())
        )
        self.branch_combobox.currentTextChanged.connect(self.view_model.updateSelectedBranch)

        self.api_key_save_button.clicked.connect(lambda: self.view_model.saveGeminiApiKey(self.api_key_lineedit.text()))
        self.github_token_save_button.clicked.connect(lambda: self.view_model.saveGithubToken(self.github_token_lineedit.text()))
        self.analyze_repo_button.clicked.connect(self.view_model.startAnalysis)
        self.cancel_analysis_button.clicked.connect(self.view_model.cancelAnalysis)
        self.send_button.clicked.connect(lambda: self.view_model.sendMessage(self.input_textedit.toPlainText().strip()))
        self.cancel_button.clicked.connect(self.view_model.cancelRequest)
        self.view_model.apiRequestStarted.connect(self.input_textedit.clear)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.model_name_combobox.currentTextChanged.connect(self.view_model.updateModelName)
        self.max_tokens_spinbox.valueChanged.connect(self.view_model.updateMaxTokens)
        self.instructions_textedit.textChanged.connect(self._on_instructions_changed)
        for checkbox in self.common_ext_checkboxes.values():
            checkbox.stateChanged.connect(self._on_extensions_changed)
        self.custom_ext_lineedit.editingFinished.connect(self._on_extensions_changed)

        # –®–∞–±–ª–æ–Ω—ã
        self.templates_combobox.currentIndexChanged.connect(self._on_template_selected)
        self.manage_templates_button.clicked.connect(self._open_manage_templates_dialog)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        self.toggle_settings_button.clicked.connect(self.view_model.toggleSettings)
        self.toggle_instructions_button.clicked.connect(self.view_model.toggleInstructions)

        # –°–∏–≥–Ω–∞–ª—ã –æ—Ç ViewModel –∫ UI
        self.view_model.windowTitleChanged.connect(self._update_window_title)
        self.view_model.geminiApiKeyStatusTextChanged.connect(self._update_gemini_api_key_status)
        self.view_model.githubTokenStatusTextChanged.connect(self._update_github_token_status)
        self.view_model.clearApiKeyInput.connect(self.api_key_lineedit.clear)
        self.view_model.clearTokenInput.connect(self.github_token_lineedit.clear)
        
        self.view_model.canSendChanged.connect(self._update_button_states)
        self.view_model.canCancelRequestChanged.connect(self._update_button_states)
        self.view_model.canAnalyzeChanged.connect(self._update_button_states)
        self.view_model.canCancelAnalysisChanged.connect(self._update_button_states)

        self.view_model.availableModelsChanged.connect(self._populate_models_combobox)
        self.view_model.repoUrlChanged.connect(lambda: self._update_settings_fields())
        self.view_model.modelNameChanged.connect(lambda: self._update_settings_fields())
        self.view_model.maxTokensChanged.connect(lambda: self._update_settings_fields())
        self.view_model.instructionsTextChanged.connect(lambda: self._update_settings_fields())
        self.view_model.checkedExtensionsChanged.connect(self._update_extensions_ui)
        
        self.view_model.instructionsVisibilityChanged.connect(self._update_instructions_visibility)
        self.view_model.settingsVisibilityChanged.connect(self._update_settings_visibility)
        
        self.view_model.chatUpdateRequired.connect(self._render_chat_view)
        self.view_model.statusMessageChanged.connect(self._update_status_bar)
        self.view_model.tokenInfoChanged.connect(self.token_status_label.setText)
        
        self.view_model.showFileDialog.connect(self._show_file_dialog)
        self.view_model.showMessageDialog.connect(self._show_message_dialog)
        self.view_model.resetUiForNewSession.connect(self._update_all_states_from_vm)

        # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        self.view_model.repoUrlChanged.connect(self._update_repo_url_field)
        self.view_model.selectedBranchChanged.connect(self._update_selected_branch)
        self.view_model.availableBranchesChanged.connect(self._populate_branch_combobox)

        # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–∫–Ω–∞ —Å–∞–º–º–∞—Ä–∏
        self.view_summaries_button.clicked.connect(self._show_summaries_window)
        
    @Slot()
    def _show_summaries_window(self):
        """–°–æ–∑–¥–∞–µ—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å —Å–∞–º–º–∞—Ä–∏."""
        if self.summaries_window is None:
            self.logger.info("–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ SummariesWindow.")
            self.summaries_window = SummariesWindow(self)
            self.view_model.fileSummariesUpdated.connect(self.summaries_window.update_summaries)
            self.summaries_window.windowClosed.connect(self._on_summaries_window_closed)
            self.summaries_window.update_summaries(self.view_model._model._file_summaries)
        
        self.logger.debug("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–Ω–∞ SummariesWindow.")
        self.summaries_window.show()
        self.summaries_window.activateWindow()

    @Slot()
    def _on_summaries_window_closed(self):
        self.logger.debug("–û–∫–Ω–æ —Å–∞–º–º–∞—Ä–∏ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ (—Å–∫—Ä—ã—Ç–æ).")
        pass        

    def eventFilter(self, obj, event):
        if obj is self.input_textedit and event.type() == event.Type.KeyPress:
            if event.key() in (Qt.Key.Key_Return, Qt.Key.Key_Enter) and event.modifiers() == Qt.KeyboardModifier.ControlModifier:
                if self.send_button.isEnabled(): self.send_button.click()
                return True
        return super().eventFilter(obj, event)

    # --- –°–ª–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI ---
    @Slot()
    def _update_all_states_from_vm(self):
        self.logger.info("–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏–∑ ViewModel...")
        self._update_settings_fields()
        self._update_extensions_ui(self.view_model._checked_common_extensions, self.view_model._custom_extensions_text)
        self._populate_models_combobox(self.view_model._model.get_available_models())
        self._update_button_states()
        self._update_window_title()
    
    @Slot()
    def _update_window_title(self):
        self.setWindowTitle(self.view_model.windowTitle)

    @Slot()
    def _update_button_states(self):
        self.send_button.setEnabled(self.view_model.canSend)
        self.input_textedit.setReadOnly(not self.view_model.canSend)
        self.cancel_button.setEnabled(self.view_model.canCancelRequest)
        self.analyze_repo_button.setEnabled(self.view_model.canAnalyze)
        self.cancel_analysis_button.setEnabled(self.view_model.canCancelAnalysis)
        self.view_summaries_button.setEnabled(bool(self.view_model._model._file_summaries))

    @Slot()
    def _update_gemini_api_key_status(self):
        self.api_key_status_label.setText(self.view_model.geminiApiKeyStatusText)

    @Slot()
    def _update_github_token_status(self):
        self.github_token_status_label.setText(self.view_model.githubTokenStatusText)
        
    @Slot(list)
    def _populate_models_combobox(self, models: list):
        self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –≤ UI: {models}")
        self.model_name_combobox.blockSignals(True)
        current_text = self.model_name_combobox.currentText()
        self.model_name_combobox.clear()
        self.model_name_combobox.addItems(models)
        self.model_name_combobox.setCurrentText(current_text)
        self.model_name_combobox.blockSignals(False)
    
    @Slot()
    def _update_settings_fields(self):
        self.model_name_combobox.setCurrentText(self.view_model.modelName)
        self.max_tokens_spinbox.setValue(self.view_model.maxTokens)
        if self.instructions_textedit.toPlainText() != self.view_model.instructionsText:
            self.instructions_textedit.setPlainText(self.view_model.instructionsText)
        self._on_instructions_changed()
        
    @Slot(set, str)
    def _update_extensions_ui(self, checked_common_set, custom_text):
        for ext, cb in self.common_ext_checkboxes.items():
            cb.setChecked(ext in checked_common_set)
        self.custom_ext_lineedit.setText(custom_text)

    @Slot(bool)
    def _update_settings_visibility(self, visible: bool):
        self.settings_group_box.setVisible(visible)
        self.toggle_settings_button.setText(self.tr("–°–≤–µ—Ä–Ω—É—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ñ≤") if visible else self.tr("–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ñº"))

    @Slot(bool)
    def _update_instructions_visibility(self, visible: bool):
        self.instructions_container.setVisible(visible)
        self.toggle_instructions_button.setText(self.tr("–°–≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚ñ≤") if visible else self.tr("–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚ñº"))

    @Slot()
    def _render_chat_view(self):
        if not self.view_model.isChatViewReady: return
        self.logger.debug("–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ ChatView...")
        history, last_error, intermediate_step = self.view_model.getChatHistoryForView()
        
        self.dialog_textedit.clear_chat()

        md_ext = ["fenced_code", "codehilite", "nl2br", "tables"]
        
        for index, msg in enumerate(history):
            role = msg.get("role")
            content = msg.get("parts", [""])[0]
            is_excluded = msg.get("excluded", False)
            html_out = markdown.markdown(content, extensions=md_ext) if role == "model" else f"<pre>{html.escape(content)}</pre>"
            self.dialog_textedit.add_message(role, f"{html_out}<hr>", index, is_excluded, is_last=False)
        
        if intermediate_step:
            self.dialog_textedit.add_message("system", f"<i>{html.escape(intermediate_step)}</i>", -1, False, is_last=False)

        if self.view_model.canCancelRequest or self.view_model.canCancelAnalysis:
            self.dialog_textedit.show_loader()
            
        if last_error:
            self.dialog_textedit.add_error_message(last_error)

        self.dialog_textedit.scroll_to_bottom()

    @Slot(str, int)
    def _update_status_bar(self, message: str, timeout: int):
        self._status_clear_timer.stop()
        self.statusBar().showMessage(message, 0)
        if timeout > 0:
            self._status_clear_timer.start(timeout)

    @Slot()
    def _clear_temporary_status_message(self):
        self.statusBar().clearMessage()

    @Slot()
    def _update_repo_url_field(self):
        if self.repo_url_lineedit.text() != self.view_model.repoUrl:
            self.repo_url_lineedit.setText(self.view_model.repoUrl)

    @Slot(list)
    def _populate_branch_combobox(self, branches: list):
        self.branch_combobox.blockSignals(True)
        self.branch_combobox.clear()
        if branches:
            self.branch_combobox.addItems(branches)
            self.branch_combobox.setEnabled(True)
        else:
            self.branch_combobox.setEnabled(False)
        self.branch_combobox.blockSignals(False)
        self._update_selected_branch()
        
    @Slot()
    def _update_selected_branch(self):
        self.branch_combobox.blockSignals(True)
        self.branch_combobox.setCurrentText(self.view_model.selectedBranch)
        self.branch_combobox.blockSignals(False)

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ ---
    def _load_instruction_templates(self):
        base_filename = "instruction_templates.json"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∏–∑ .env –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        current_app_lang = os.getenv('APP_LANGUAGE', QLocale.system().name().split('_')[0])

        # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –∏—â–µ–º —Ñ–∞–π–ª —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, _en.
        templates_to_load = base_filename
        if current_app_lang != 'ru': # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º current_app_lang
            base, ext = os.path.splitext(base_filename)
            localized_filename = f"{base}_{current_app_lang}{ext}"
            localized_path = self._get_resource_path(localized_filename)
            if os.path.exists(localized_path):
                templates_to_load = localized_filename

        self._templates_file_path = self._get_resource_path(templates_to_load)

        if os.path.exists(self._templates_file_path):
            try:
                with open(self._templates_file_path, 'r', encoding='utf-8') as f:
                    self.instruction_templates = json.load(f)
                self.logger.info(self.tr("–®–∞–±–ª–æ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ '{0}': {1} —à—Ç.").format(os.path.basename(self._templates_file_path), len(self.instruction_templates)))
            except (json.JSONDecodeError, OSError) as e:
                self.logger.error(self.tr("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ '{0}': {1}").format(self._templates_file_path, e))
                self.instruction_templates = {}
        else:
            self.instruction_templates = {}
            self.logger.warning(self.tr("–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {0}").format(self._templates_file_path))
            
    def _save_instruction_templates(self) -> bool:
        try:
            with open(self._templates_file_path, 'w', encoding='utf-8') as f:
                json.dump(self.instruction_templates, f, ensure_ascii=False, indent=4)
            self.logger.info(self.tr("–®–∞–±–ª–æ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {0}").format(self._templates_file_path))
            return True
        except Exception as e:
            self.logger.error(self.tr("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {0}").format(e), exc_info=True)
            self._show_message_dialog("crit", self.tr("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"), self.tr("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω—ã: {0}").format(e))
            return False

    def _populate_templates_combobox(self):
        self.templates_combobox.blockSignals(True)
        self.templates_combobox.clear()
        self.templates_combobox.addItems([self.CUSTOM_INSTRUCTIONS_TEXT] + sorted(self.instruction_templates.keys()) + [self.SAVE_AS_TEMPLATE_TEXT])
        self.templates_combobox.setCurrentIndex(0)
        self.templates_combobox.blockSignals(False)

    @Slot(int)
    def _on_template_selected(self, index):
        selected_text = self.templates_combobox.itemText(index)
        if selected_text == self.SAVE_AS_TEMPLATE_TEXT:
            current_instructions = self.instructions_textedit.toPlainText().strip()
            if not current_instructions:
                self._show_message_dialog("warn", self.tr("–ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å"), self.tr("–ü–æ–ª–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø—É—Å—Ç–æ–µ."))
                self.templates_combobox.setCurrentIndex(0)
                return
            template_name, ok = QInputDialog.getText(self, self.tr("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω"), self.tr("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞:"))
            if ok and template_name.strip():
                if template_name in self.instruction_templates:
                    if QMessageBox.question(self, self.tr("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?"), self.tr("–®–∞–±–ª–æ–Ω '{0}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?").format(template_name)) == QMessageBox.StandardButton.No:
                        self.templates_combobox.setCurrentIndex(0)
                        return
                self.instruction_templates[template_name] = current_instructions
                if self._save_instruction_templates():
                    self._populate_templates_combobox()
                    self.templates_combobox.setCurrentText(template_name)
            else:
                self.templates_combobox.setCurrentIndex(0)
        elif selected_text != self.CUSTOM_INSTRUCTIONS_TEXT:
            self.instructions_textedit.setPlainText(self.instruction_templates.get(selected_text, ""))

    @Slot()
    def _on_instructions_changed(self):
        current_text = self.instructions_textedit.toPlainText()
        self.view_model.updateInstructions(current_text)
        self.templates_combobox.blockSignals(True)
        matched_name = next((name for name, content in self.instruction_templates.items() if content == current_text), None)
        self.templates_combobox.setCurrentText(matched_name or self.CUSTOM_INSTRUCTIONS_TEXT)
        self.templates_combobox.blockSignals(False)

    @Slot()
    def _open_manage_templates_dialog(self):
        if not ManageTemplatesDialog:
            self._show_message_dialog("crit", self.tr("–û—à–∏–±–∫–∞"), self.tr("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."))
            return
        dialog = ManageTemplatesDialog(self.instruction_templates, self)
        if dialog.exec():
            self.instruction_templates = dialog.get_updated_templates()
            if self._save_instruction_templates():
                self._populate_templates_combobox()
                self._update_settings_fields()

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---
    @Slot()
    def _on_extensions_changed(self):
        checked = {ext for ext, cb in self.common_ext_checkboxes.items() if cb.isChecked()}
        custom = self.custom_ext_lineedit.text()
        self.view_model.updateExtensionsFromUi(checked, custom)
        
    def closeEvent(self, event):
        if not self._check_dirty_state(self.tr("–≤—ã—Ö–æ–¥–æ–º –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")):
            event.ignore()
            return
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –ª–æ–≥–≥–µ—Ä–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        if self._log_viewer_window is not None:
            self.logger.info("Main window is closing, ensuring log reader thread is stopped...")
            # –í—ã–∑–æ–≤ close() –æ–∫–Ω–∞ –ª–æ–≥–≥–µ—Ä–∞ –∑–∞–ø—É—Å—Ç–∏—Ç –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π closeEvent,
            # –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–æ–≤–µ—Ç _stop_log_reading –∏ –¥–æ–∂–¥–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞.
            self._log_viewer_window.close()
        event.accept()

    def _check_dirty_state(self, action_text: str) -> bool:
        if not self.view_model.isDirty: return True
        reply = QMessageBox.question(self, self.tr("–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"), self.tr("–ò–º–µ—é—Ç—Å—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –ø–µ—Ä–µ–¥ {0}?").format(action_text),
                                     QMessageBox.StandardButton.Save | QMessageBox.StandardButton.Discard | QMessageBox.StandardButton.Cancel,
                                     QMessageBox.StandardButton.Cancel)
        if reply == QMessageBox.StandardButton.Save: return self.view_model.saveSession()
        return reply != QMessageBox.StandardButton.Cancel

    def _new_session(self):
        if self._check_dirty_state(self.tr("—Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")): self.view_model.newSession()
    def _open_session(self):
        if self._check_dirty_state(self.tr("–æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥—Ä—É–≥–æ–π —Å–µ—Å—Å–∏–∏")): self.view_model.openSession()

    @Slot(str, str, str)
    def _show_file_dialog(self, dialog_type: str, title: str, filter_or_dir: str):
        if dialog_type == "open":
            filepath, _ = QFileDialog.getOpenFileName(self, title, os.path.expanduser("~"), filter_or_dir)
            if filepath: self.view_model.sessionFileSelectedToOpen(filepath)
        elif dialog_type == "save":
            default_path, file_filter = filter_or_dir.split(";;")
            filepath, _ = QFileDialog.getSaveFileName(self, title, os.path.join(os.path.expanduser("~"), default_path), file_filter)
            if filepath: self.view_model.sessionFileSelectedToSave(filepath)

    @Slot(str, str, str)
    def _show_message_dialog(self, msg_type: str, title: str, message: str):
        QMessageBox.information(self, title, message)

    @Slot()
    def _show_help_content(self):
        HelpDialog(self).exec()

    @Slot()
    def _show_about_dialog(self):
        QMessageBox.about(self, self.tr("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ GitGemini Pro"),
                          self.tr("<b>GitGemini Pro v2.0</b><br><br>"
                                  "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã "
                                  "GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤. –ò—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ Google Gemini "
                                  "–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, GitGemini Pro "
                                  "–ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º ¬´–∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã¬ª —Å–≤–æ–µ–º—É –∫–æ–¥—É, –ø–æ–ª—É—á–∞—Ç—å "
                                  "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, "
                                  "–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º "
                                  "<b>–ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</b> –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.<br><br>"
                                  "–ê–≤—Ç–æ—Ä: <a href='mailto:kobaltmail@gmail.com'>kobaltGIT</a><br>"
                                  "–õ–∏—Ü–µ–Ω–∑–∏—è: <a href='https://mit-license.org/'>MIT License<br><br>"))

def setup_logging() -> str: # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç str
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É –ª–æ–≥–∞."""
    log_dir = "logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    log_filename = os.path.join(log_dir, f"gitgemini_{datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.log")
    
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    file_handler = logging.handlers.RotatingFileHandler(log_filename, maxBytes=5*1024*1024, backupCount=5, encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)
    root_logger.addHandler(file_handler)
    
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    root_logger.addHandler(console_handler)
    
    root_logger.info("–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
    return log_filename # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞

def get_base_path():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ .env —Ñ–∞–π–ª–∞."""
    if getattr(sys, 'frozen', False):
        return os.path.dirname(sys.executable)
    else:
        return os.path.dirname(os.path.abspath(__file__))

def main():
    QCoreApplication.setOrganizationName("Kobalt")
    QCoreApplication.setApplicationName("GitGeminiPro")
    os.environ["QTWEBENGINE_CHROMIUM_FLAGS"] = "--disable-gpu"
    QApplication.setAttribute(Qt.ApplicationAttribute.AA_EnableHighDpiScaling)

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞ ---
    base_path = get_base_path()
    dotenv_path = os.path.join(base_path, '.env')

    # –°–æ–∑–¥–∞–µ–º .env, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(dotenv_path):
        with open(dotenv_path, 'w') as f:
            pass # –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
    
    load_dotenv(dotenv_path=dotenv_path)

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ .env –∏–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    app_lang = os.getenv('APP_LANGUAGE', QLocale.system().name().split('_')[0])
    
    app = QApplication(sys.argv)
    
    # --- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ---
    translator = QTranslator()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ
    locale = QLocale(app_lang) 
    translations_path = os.path.join(base_path, 'translations')
    if translator.load(locale, "app", "_", translations_path):
        app.installTranslator(translator)
        print(f"–§–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ª–æ–∫–∞–ª–∏ '{app_lang}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.") # –î–æ–±–∞–≤–∏–ª app_lang –¥–ª—è –ª–æ–≥–∞
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ª–æ–∫–∞–ª–∏ '{locale.name()}' –∏–∑ {translations_path}") # –ò—Å–ø–æ–ª—å–∑—É–µ–º print –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
    
    log_file_path = setup_logging() # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
    
    logger = logging.getLogger(__name__)
    logger.info("="*20 + " –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è GitGemini Pro " + "="*20)
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —è–∑—ã–∫: {app_lang}")

    chat_model = ChatModel(app_lang=app_lang)
    chat_view_model = ChatViewModel(chat_model)
    window = MainWindow(chat_view_model, log_file_path=log_file_path) # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É
    window.show()
    
    sys.exit(app.exec())

if __name__ == "__main__":
    main()